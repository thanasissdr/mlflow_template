services:

  minio:
    image: minio/minio:latest

    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}

    ports:
      - 9000:9000
      - 9001:9001

    volumes:
      - minio_data:/minio_data

    command: server /minio_data --console-address ":9001"
    
    profiles:
      - default


  mlflow.ui:
  
    image: ghcr.io/mlflow/mlflow:latest

    ports: 
      - 5000:5000

    environment:
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

    command: >
      /bin/bash -c "
      pip install boto3 &&
      mlflow server
      --backend-store-uri sqlite:///mlflow_data/mlflow.db
      --default-artifact-root s3://mlflow
      --host 0.0.0.0"

    volumes:
        - mlflow_data:/mlflow_data

    profiles:
      - default


  mlflow.server:
    image: ghcr.io/mlflow/mlflow:latest
    
    ports:
      - 5001:5001
    
    environment:
      MLFLOW_TRACKING_URI: http://mlflow.ui:5000
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

    command: /bin/bash -c "pip install --upgrade pip && pip install boto3 && mlflow models serve -m models:/RandomForestClassifier/1 --host 0.0.0.0 --no-conda -p 5001"
    
    profiles:
      - serving # This is used in order not to spin up that service when docker-compose up, because the model might be missing

volumes:
  minio_data:
  mlflow_data:


